//Check if teh tree is BST: Inorder traversal should be in increasing order
  public static void Main(string[] args)
        {
            int noOfTC = Convert.ToInt32(Console.ReadLine());


            for (int t = 0; t < noOfTC; ++t)
            {
                int num = Convert.ToInt32(Console.ReadLine());
                //string[] s1 = Console.ReadLine().Split(' ');
                //int[] startArray = Array.ConvertAll(s1, int.Parse);           


                //string str = Console.ReadLine();
                Node n = new Node(10);
                
                bool res = IsBST(n, int.MinValue);

                Console.ReadLine();
            }
        }
 public static bool IsBST(Node root, int prev)
        {
            if (root != null)
            {
                if (!IsBST(root.left, prev))
                    return false;
                if (root.data <= prev)
                    return false;
                prev = root.data;
                IsBST(root.right, prev);
            }

        }
        
        //The above solution needs to be worked upon.
        
        //Another solution. :
        public class Solution {
    public bool IsValidBST(TreeNode root) {
        bool res=IsBST(root, int.MinValue, int.MaxValue);
            return res;
    }
    
    public bool IsBST(TreeNode root, int min, int max)
        {
            if(root==null)
                return true;
        
            if(root.val<min || root.val>max)
                return false;
        
            return IsBST(root.left, min, root.val-1) &&
                   IsBST(root.right, root.val+1, max);

        }

}
